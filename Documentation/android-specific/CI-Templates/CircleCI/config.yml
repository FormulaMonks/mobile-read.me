version: 2
references:
  ## Workspaces
  workspace: &workspace
    ~/src

  ## Docker image configurations
  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'

  ## Cache
  gradle_key: &gradle_key
    jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}

  gems_key: &gems_key
    gems-{{ checksum "Gemfile.lock" }}

  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: *gradle_key

  restore_gems_cache: &restore_gems_cache
    restore_cache:
      key: *gems_key

  save_gradle_cache: &save_gradle_cache
    save_cache:
      key: *gradle_key
      paths:
        - ~/.gradle
        - ~/.m2

  save_gems_cache: &save_gems_cache
    save_cache:
      key: *gems_key
      paths:
        - vendor/bundle
  ## Dependencies
  ruby_dependencies: &ruby_dependencies
    run:
      name: Download Ruby Dependencies
      command: bundle check || bundle install --path vendor/bundle

  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies

  ## Gradlew permissions
  gradlew_permissions: &gradlew_permissions
    run:
      name: Fix gradlew permissions
      command: sudo chmod +x ./gradlew

jobs:

  ## Run tests, lint validations and everything that we need to make sure that the project is
  ## properly build.
  validate_build:
    <<: *android_config
    steps:
      - checkout
      - *gradlew_permissions
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - run:
          name: Run tests
          command: bundle exec fastlane validate_build

  ## Manages the builds running over development. This is, deploying the build to Crashlytics
  ## through the android-qa testing group on Debug mode.
  deploy_development:
    <<: *android_config
    steps:
      - checkout
      - *gradlew_permissions
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - run:
          name: Deploy to Crashlytics Beta
          command: bundle exec fastlane deploy_qa build_number:"${CIRCLE_BUILD_NUM}"

  ## Manages the builds running over release. This is, deploying the build to Crashlytics
  ## through the android-milestone testing group on Release mode.
  deploy_release:
    <<: *android_config
    steps:
      - checkout
      - *gradlew_permissions
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - run:
          name: Deploy to Crashlytics Beta
          command: bundle exec fastlane deploy_rc build_number:"${CIRCLE_BUILD_NUM}"

  ## Deploy to Play Store
  deploy_play_store:
    <<: *android_config
    steps:
      - checkout
      - *gradlew_permissions
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - run:
          name: Deploy to Play Store
          command: bundle exec fastlane deploy_to_play_store

workflows:
  version: 2
  workflow:
    jobs:
      - validate_build:
          filters:
            branches:
              only:
                - /CM-.*/
      - deploy_development:
          filters:
            branches:
              only:
                - development
      - deploy_release:
          filters:
            branches:
              only:
                - /release.*/
      - deploy_play_store:
          filters:
            branches:
              only:
                - not-defined-yet
